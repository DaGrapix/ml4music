train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- data[, p]
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
ndata<-cbind(x.train,y)
y
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
ndata<-cbind(x.train,y)
y
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- x[which(train==FALSE)]
y.test <- x[which(train==FALSE)]
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
df.train <- cbind(x.train,y.train)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
df.train <- cbind(x.train,y.train)
df.test <- cbind(x.test,y.test)
x.train
Mod0<-glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV,family=binomial, data=df.train)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
df.train <- cbind(x.train,y.train)
df.test <- cbind(x.test,y.test)
x.train
x.train
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
df.train <- cbind(x.train,y.train)
df.test <- cbind(x.test,y.test)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV,family=binomial, data=df.train)
x.train$PAR_TC
dim(x.train)
df.train <- cbind(x.train,y=y.train)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV,family=binomial, data=df.train)
df.test <- cbind(x.test,y=y.test)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
df.train <- cbind(x.train,y=y.train)
df.test <- cbind(x.test,y=y.test)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV,family=binomial, data=df.train)
summary(Mod0)
## Définition de ModT
ModT<-glm(y~.,family=binomial,data=df.train)
p_value<-coef(summary(ModT))[-1,4]
index_var_Mod1 <- which(p_value>0.05)
var_Mod1 <- names(data[index_var_Mod1])
formula_Mod1 <- as.formula(paste("y ~",paste(var_Mod1, collapse= "+")))
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Classical", 1, 0)
train=sample(c(TRUE,FALSE), n-1, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
df.train <- cbind(x.train,y=y.train)
df.test <- cbind(x.test,y=y.test)
n.train <- nrow(df.train)
p.train <- ncol(df.train)
n.test <- nrow(df.test)
p.test <- ncol(df.test)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV,family=binomial, data=df.train)
summary(Mod0)
## Définition de ModT
ModT <- glm(y~.,family=binomial,data=df.train)
## Définition de ModT
ModT <- glm(y~.,family=binomial,data=df.train)
summary(ModT)
p_value <- coef(summary(ModT))[-1,4]
p_value
Mod1<-glm(formula = formula_Mod1, family=binomial, data=df.train)
## Définition de Mod0
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV,family=binomial, data=df.train)
summary(Mod0)
## Pour ModT, il faut enlever les variables fortement corrélées et peut être aussi les autres qui sont évoquées.
## Étape 1 : modifier ndata en fonction des variables que l'on enlève
## Étape 2 : Définir le modèle :
## Définition de ModT
ModT <- glm(y~.,family=binomial,data=df.train)
summary(ModT)
## On récupère les p-value des variables
p_value <- coef(summary(ModT))[-1,4]
## On sélectionne celle qui ont un niveau de significativité de 5% et on crée la formule de notre modèle Mod1
index_var_Mod1 <- which(p_value>0.05)
var_Mod1 <- names(data[index_var_Mod1])
formula_Mod1 <- as.formula(paste("y ~",paste(var_Mod1, collapse= "+")))
Mod1<-glm(formula <- formula_Mod1, family=binomial, data=df.train)
index_var_Mod2 <- which(p_value>0.2)
var_Mod2 <- names(data[index_var_Mod2])
formula_Mod2 <- as.formula(paste("y ~",paste(var_Mod2, collapse= "+")))
Mod2<-glm(formula=formula_Mod2, family=binomial, data=df.train)
## ModAIC
library(MASS)
#step <- stepAIC(ModT)
test_data <- read.csv("Music_test.txt",header=TRUE,sep=";")
dim(test_data)
dim(data[-train,])
dim(data[train,])
library(ggplot2)
library(plyr)
library(stats)
library(tidyverse)
library(cowplot)
library(ROCR)
rm(list=ls())
setwd(getwd())
data <- read.csv("Music_2023.txt",sep=";",header=TRUE)
dim(data)
n <- nrow(data)
p <- ncol(data)
# Proportion des genres musicaux
freq<-plyr::count(data,'GENRE')
freq
prop_classical<-freq[1,2]/n
prop_jazz<-freq[2,2]/n
prop_classical
prop_jazz
data <- data[,-c(128:147)]
n <- nrow(data)
p <- ncol(data)
dim(data)
density_plot = function(X,xlab,lxlab){
density<-ggplot(data,aes(x=X))+geom_density(col="blue")+xlab(xlab)
log_density<-ggplot(data,aes(x=log(X)))+geom_density(col="red")+xlab(lxlab)
plot_grid(density,log_density,labels=c("Densité","Densité log"),label_size=12,ncol=1,label_x = 0, label_y = 0,hjust = -0.5, vjust = -0.5)
}
density_plot(data$PAR_SC,xlab="PAR_SC",lxlab="log(PAR_SC)")
density_plot(data$PAR_SC_V,xlab="PAR_SC_V",lxlab="log(PAR_SC_V)")
density_plot(data$PAR_ASC_V,xlab="PAR_ASC_V",lxlab="log(PAR_ASC_V)")
data$PAR_SC_V <- log(data$PAR_SC_V)
data$PAR_ASC_V <- log(data$PAR_ASC_V)
density_plot(data$PAR_SC,xlab="PAR_SC",lxlab="log(PAR_SC)")
density_plot(data$PAR_SC_V,xlab="PAR_SC_V",lxlab="log(PAR_SC_V)")
density_plot(data$PAR_ASC_V,xlab="PAR_ASC_V",lxlab="log(PAR_ASC_V)")
corr <- cor(x=data[,-p])
#selection des indices de la matrice de correlation > 0.99
high.corr.index.new <- which(corr > 0.99, arr.ind = TRUE) %>% unname
#selection des indices appartenant a la matrice triangulaire inferieure stricte,
#pour retirer les doublons, ainsi que les elements diagonaux.
lower.tri <- lower.tri(corr, diag=FALSE)
high.corr.index.new <- high.corr.index.new[which(lower.tri[high.corr.index.new]==TRUE),]
high.corr.index.new
correlated.variables <- matrix(c(names(data)[high.corr.index.new[,1]],
names(data)[high.corr.index.new[,2]]), nrow=nrow(high.corr.index.new))
correlated.variables
name.list <- as.vector(correlated.variables)
high.corr.index <- matrix(which(names(data) %in% name.list), nrow=nrow(high.corr.index.new))
high.corr.index
data <- data[,-high.corr.index.new[,1]]
n <- nrow(data)
p <- ncol(data)
dim(data)
indices <- which(colnames(data) %in% c("PAR_ASE_M", "PAR_ASE_MV", "PAR_SFM_M", "PAR_SFM_MV"))
data.old <- data
data <- data[, -indices]
n <- nrow(data)
p <- ncol(data)
dim(data)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
y <- ifelse(data$GENRE=="Jazz", 1, 0)
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
data.train <- cbind(x.train, y=y.train)
data.test <- cbind(x.test, y=y.test)
n.train <- nrow(data.train)
p.train <- ncol(data.train)
n.test <- nrow(data.test)
p.test <- ncol(data.test)
dim(data.train)
dim(data.test)
View(data.old)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
x.old <- data.old[, -p]
y <- ifelse(data$GENRE=="Jazz", 1, 0)
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.old.train <- x.old[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
data.train <- cbind(x.train, y=y.train)
data.test <- cbind(x.test, y=y.test)
n.train <- nrow(data.train)
p.train <- ncol(data.train)
n.test <- nrow(data.test)
p.test <- ncol(data.test)
dim(data.train)
dim(data.test)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
x.old <- data.old[, -p]
y <- ifelse(data$GENRE=="Jazz", 1, 0)
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.old.train <- x.old[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
data.train <- cbind(x.train, y=y.train)
data.old.train <- cbind(x.old.train, y=y.train)
data.test <- cbind(x.test, y=y.test)
n.train <- nrow(data.train)
p.train <- ncol(data.train)
n.test <- nrow(data.test)
p.test <- ncol(data.test)
dim(data.train)
dim(data.test)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
x.old <- data.old[, -p]
y <- ifelse(data$GENRE=="Jazz", 1, 0)
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.old.train <- x.old[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
data.train <- cbind(x.train, y=y.train)
data.old.train <- cbind(x.old.train, y=y.train)
data.test <- cbind(x.test, y=y.test)
dim(data.train)
dim(data.old.train)
dim(data.test)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
x <- data[, -p]
x.old <- data.old[, -p]
y <- ifelse(data$GENRE=="Jazz", 1, 0)
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
x.train <- x[which(train),]
x.old.train <- x.old[which(train),]
x.test <- x[which(train==FALSE),]
y.train <- y[which(train)]
y.test <- y[which(train==FALSE)]
data.train <- cbind(x.train, y=y.train)
data.old.train <- cbind(x.old.train, y=y.train)
data.test <- cbind(x.test, y=y.test)
dim(data.train)
dim(data.old.train)
dim(data.test)
set.seed(103)
train=sample(c(TRUE,FALSE),n,rep=TRUE,prob=c(2/3,1/3))
data$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
data.old$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
dim(data.train)
dim(data.old.train)
dim(data.test)
set.seed(103)
data$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
data.old$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
dim(data.train)
dim(data.old.train)
dim(data.test)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
set.seed(103)
data$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
data.old$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
data.old.test <- data.old[which(train),]
dim(data.train)
dim(data.old.train)
dim(data.test)
set.seed(103)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
data$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
data.old$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
data.old.test <- data.old[which(train),]
dim(data.train)
dim(data.old.train)
dim(data.test)
set.seed(103)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
data$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
data.old$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
data.old.test <- data.old[which(train==FALSE),]
dim(data.train)
dim(data.old.train)
dim(data.test)
dim(data.old.test)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV, family=binomial, data=data.old.train)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV, family=binomial, data=data.old.train)
head(data.old.train)
data.old.train %>% dim()
library(ggplot2)
library(plyr)
library(stats)
library(tidyverse)
library(cowplot)
library(ROCR)
rm(list=ls())
setwd(getwd())
data <- read.csv("Music_2023.txt",sep=";",header=TRUE)
dim(data)
n <- nrow(data)
p <- ncol(data)
summary(data)
## A FAIRE : Analyse uni-bi variée
##Question : Comment choisir les variables qu'on observe ?
# Proportion des genres musicaux
freq<-plyr::count(data,'GENRE')
freq
prop_classical<-freq[1,2]/n
prop_jazz<-freq[2,2]/n
prop_classical
prop_jazz
data <- data[,-c(128:147)]
n <- nrow(data)
p <- ncol(data)
dim(data)
density_plot = function(X,xlab,lxlab){
density<-ggplot(data,aes(x=X))+geom_density(col="blue")+xlab(xlab)
log_density<-ggplot(data,aes(x=log(X)))+geom_density(col="red")+xlab(lxlab)
plot_grid(density,log_density,labels=c("Densité","Densité log"),label_size=12,ncol=1,label_x = 0, label_y = 0,hjust = -0.5, vjust = -0.5)
}
density_plot(data$PAR_SC,xlab="PAR_SC",lxlab="log(PAR_SC)")
density_plot(data$PAR_SC_V,xlab="PAR_SC_V",lxlab="log(PAR_SC_V)")
density_plot(data$PAR_ASC_V,xlab="PAR_ASC_V",lxlab="log(PAR_ASC_V)")
data$PAR_SC_V <- log(data$PAR_SC_V)
data$PAR_ASC_V <- log(data$PAR_ASC_V)
density_plot(data$PAR_SC,xlab="PAR_SC",lxlab="log(PAR_SC)")
density_plot(data$PAR_SC_V,xlab="PAR_SC_V",lxlab="log(PAR_SC_V)")
density_plot(data$PAR_ASC_V,xlab="PAR_ASC_V",lxlab="log(PAR_ASC_V)")
corr <- cor(x=data[,-p])
#selection des indices de la matrice de correlation > 0.99
high.corr.index.new <- which(corr > 0.99, arr.ind = TRUE) %>% unname
#selection des indices appartenant a la matrice triangulaire inferieure stricte,
#pour retirer les doublons, ainsi que les elements diagonaux.
lower.tri <- lower.tri(corr, diag=FALSE)
high.corr.index.new <- high.corr.index.new[which(lower.tri[high.corr.index.new]==TRUE),]
high.corr.index.new
correlated.variables <- matrix(c(names(data)[high.corr.index.new[,1]],
names(data)[high.corr.index.new[,2]]), nrow=nrow(high.corr.index.new))
correlated.variables
name.list <- as.vector(correlated.variables)
high.corr.index <- matrix(which(names(data) %in% name.list), nrow=nrow(high.corr.index.new))
high.corr.index
data <- data[,-high.corr.index.new[,1]]
n <- nrow(data)
p <- ncol(data)
dim(data)
indices <- which(colnames(data) %in% c("PAR_ASE_M", "PAR_ASE_MV", "PAR_SFM_M", "PAR_SFM_MV"))
data <- data[, -indices]
n <- nrow(data)
p <- ncol(data)
dim(data)
set.seed(103)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
data$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
data.old$GENRE <- ifelse(data$GENRE=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
data.old.test <- data.old[which(train==FALSE),]
dim(data.train)
dim(data.old.train)
dim(data.test)
dim(data.old.test)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV, family=binomial, data=data.old.train)
names(data)[p] = "y"
data$y
set.seed(103)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
names(data)[p] = "y"
names(data.old)[p] = "y"
data$y <- ifelse(data$GENRE=="Jazz", 1, 0)
names(data.old)[p] = "y"
names(data.old)
names(data.old[,p]) = "y"
data
names(data[,p]) = "y"
names(data.old[,p]) = "y"
set.seed(103)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
names(data[,p]) = "y"
names(data.old[,p]) = "y"
data$y <- ifelse(data$GENRE=="Jazz", 1, 0)
data$y
names(data)
set.seed(103)
data.old <- read.csv("Music_2023.txt",sep=";",header=TRUE)
names(data)[p] = "y"
names(data.old)[p] = "y"
data$y <- ifelse(data$y=="Jazz", 1, 0)
data.old$y <- ifelse(data$y=="Jazz", 1, 0)
## echantillon d'entrainement
train = sample(c(TRUE,FALSE), n, rep=TRUE, prob=c(2/3,1/3))
data.train <- data[which(train),]
data.old.train <- data.old[which(train),]
## echantillon test
data.test <- data[which(train==FALSE),]
data.old.test <- data.old[which(train==FALSE),]
dim(data.train)
dim(data.old.train)
dim(data.test)
dim(data.old.test)
Mod0 <- glm(y~PAR_TC+PAR_SC+PAR_SC_V+PAR_ASE_M,PAR_ASE_MV+PAR_SFM_M+PAR_SFM_MV, family=binomial, data=data.old.train)
summary(Mod0)
## Définition de ModT
ModT <- glm(y~., family=binomial, data=data.train)
## Définition de ModT
ModT <- glm(y~., family=binomial, data=data.train)
summary(ModT)
summary(ModT)
## On récupère les p-value des variables
p_value <- coef(summary(ModT))[-1,4]
## On sélectionne celles qui ont un niveau de significativité de 5% et on crée la formule de notre modèle Mod1
index.var.Mod1 <- which(p_value>0.05)
var.Mod1 <- names(data[index.var.Mod1])
formula.Mod1 <- as.formula(paste("y ~",paste(var.Mod1, collapse= "+")))
Mod1<-glm(formula <- formula.Mod1, family=binomial, data=data.train)
Mod1<-glm(formula <- formula.Mod1, family=binomial, data=data.train)
## On sélectionne celles qui ont un niveau de significativité de 20% et on crée la formule de notre modèle Mod2
index.var.Mod2 <- which(p_value>0.2)
var.Mod2 <- names(data[index.var.Mod2])
formula.Mod2 <- as.formula(paste("y ~",paste(var.Mod2, collapse= "+")))
Mod2 <- glm(formula=formula.Mod2, family=binomial, data=data.train)
library(MASS)
step <- stepAIC(ModT)
