knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
par(mfrow=c(2,2))
data.mean.ASE <- apply(data.0[,indices.ASE], MARGIN=1, FUN=mean)
#Mini projet
#Anthony Kalaydjian - Mathieu Occhipinti
library(ggplot2)
library(plyr)
library(stats)
library(tidyverse)
library(cowplot)
library(ROCR)
library(MASS)
library(glmnet)
setwd(getwd())
rm(list=ls())
graphics.off()
####################################
############# Partie 1 #############
####################################
############################    Q1
## importation des données
data <- read.csv("Music_2023.txt",sep=";",header=TRUE)
setwd("F:/ZZ/sta203_projet")
#Mini projet
#Anthony Kalaydjian - Mathieu Occhipinti
library(ggplot2)
library(plyr)
library(stats)
library(tidyverse)
library(cowplot)
library(ROCR)
library(MASS)
library(glmnet)
setwd(getwd())
rm(list=ls())
graphics.off()
####################################
############# Partie 1 #############
####################################
############################    Q1
## importation des données
data <- read.csv("Music_2023.txt",sep=";",header=TRUE)
dim(data)
#Les données ont bien été importées
#Remarque: on garde une copie du dataframe original
data.0 <- read.csv("Music_2023.txt",sep=";",header=TRUE)
## Analyse uni et bi variée
## Proportion des genres musicaux
proportion.classique <- mean(ifelse(data$GENRE=="Classical", 1, 0))
proportion.jazz <- mean(ifelse(data$GENRE=="Jazz", 1, 0))
proportion.classique
proportion.jazz
#Les deux catégories sont relativement équivalentes en taille, c'est bien pour la classification.
#On sauvegarde les indices variables à retirer
#Ici on retirera les variables en double
indices.retires <- c(148:167)
## Analyse de densité des variables PAR_SC, PAR_SCV et PAR_ASC_V
density_plot <- function(X,xlab,lxlab){
density <- ggplot(data.0,aes(x=X)) + geom_density(col="blue") + xlab(xlab)
log_density <- ggplot(data.0, aes(x=log(X))) + geom_density(col="red") + xlab(lxlab)
plot_grid(density, log_density, labels=c("Densité","Densité log"), label_size=12, ncol=1, label_x=0, label_y=0, hjust=-0.5, vjust=-0.5)
}
density_plot(data.0$PAR_SC, xlab="PAR_SC", lxlab="log(PAR_SC)")
density_plot(data.0$PAR_SC_V, xlab="PAR_SC_V", lxlab="log(PAR_SC_V)")
density_plot(data.0$PAR_ASC_V, xlab="PAR_ASC_V", lxlab="log(PAR_ASC_V)")
## Transformation log
data.0$PAR_SC_V <- log(data.0$PAR_SC_V)
data.0$PAR_ASC_V <- log(data.0$PAR_ASC_V)
density_plot(data.0$PAR_SC, xlab="PAR_SC", lxlab="log(PAR_SC)")
density_plot(data.0$PAR_SC_V, xlab="PAR_SC_V", lxlab="log(PAR_SC_V)")
## Variables très corrélées
#Remarque: on a ici déjà retiré les doublons
data <- data.0[, -indices.retires]
corr <- cor(x=data[, -ncol(data)])
#selection des indices de la matrice de correlation > 0.99
high.corr.index.new <- which(corr>0.99, arr.ind = TRUE) %>% unname
#selection des indices appartenant a la matrice triangulaire inferieure stricte,
#pour retirer les doublons, ainsi que les elements diagonaux.
lower.tri <- lower.tri(corr, diag=FALSE)
high.corr.index.new <- high.corr.index.new[which(lower.tri[high.corr.index.new]==TRUE),]
high.corr.index.new
#nom des couples de variables très corrélées
correlated.variables <- matrix(c(names(data)[high.corr.index.new[,1]],
names(data)[high.corr.index.new[,2]]),
nrow=nrow(high.corr.index.new))
correlated.variables
#Calcul des indices de ces variables dans le dataframe d'origine
name.list <- as.vector(correlated.variables)
high.corr.index <- matrix(which(names(data.0) %in% name.list), nrow=nrow(high.corr.index.new))
high.corr.index
#indices des variables corrélées
indices.corr <- c(high.corr.index[,1], high.corr.index[,2])
indices.corr
#plot des variables corrélées
corrplot(cor(data.0[,indices.corr]))
data.mean.ASE <- apply(data.0[,indices.ASE], MARGIN=1, FUN=mean)
par(mfrow=c(2,2))
data.mean.ASE <- apply(data.0[,indices.ASE], MARGIN=1, FUN=mean)
#Remarque, on réutilise le dataframe original ici
indices.ASE <- c(4:37)
indices.ASEV <- c(39:72)
indices.SFM <- c(78:101)
indices.SFMV <- c(103:126)
par(mfrow=c(2,2))
data.mean.ASE <- apply(data.0[,indices.ASE], MARGIN=1, FUN=mean)
plot(x=data.mean.ASE, y=data.0$PAR_ASE_M, xlab="mean(PAR_ASE)", ylab="PAR_ASE_M")
data.mean.ASEV <- apply(data.0[,indices.ASEV], MARGIN=1, FUN=mean)
plot(x=data.mean.ASEV, y=data.0$PAR_ASE_MV, xlab="mean(PAR_ASEV)", ylab="PAR_ASE_MV")
data.mean.SFM <-apply(data.0[,indices.SFM], MARGIN=1, FUN=mean)
plot(x=data.mean.SFM, y=data.0$PAR_SFM_M, xlab="mean(PAR_SFM)", ylab="PAR_SFM_M")
data.mean.SFMV <-apply(data.0[,indices.SFMV], MARGIN=1, FUN=mean)
plot(x=data.mean.SFMV, y=data.0$PAR_SFM_MV, xlab="mean(PAR_SFMV)", ylab="PAR_SFM_MV")
